// Code generated by mockery v2.43.2. DO NOT EDIT.

package storagemocks

import (
	crossfit "github.com/wodm8/wodm8-core/internal/crossfit"
	domain "github.com/wodm8/wodm8-core/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// WodRepository is an autogenerated mock type for the WodRepository type
type WodRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *WodRepository) Get(id string) ([]domain.CreatedWod, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.CreatedWod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.CreatedWod, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.CreatedWod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CreatedWod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: wod
func (_m *WodRepository) Save(wod crossfit.Wod) error {
	ret := _m.Called(wod)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(crossfit.Wod) error); ok {
		r0 = rf(wod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWodRepository creates a new instance of WodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWodRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WodRepository {
	mock := &WodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
